import pandas as pd
import pytest
import sys
import os
from scripts.modeling import main
from click.testing import CliRunner

# Import the count_classes function from the src folder
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

def test_main_creates_expected_files(tmp_path):
    """
    Test if the main function generates output files in the charts directory.
    """
    # Setup test data
    x_train = pd.DataFrame({'trip_distance': [1, 2, 3, 4, 5]})
    y_train = pd.DataFrame({'fare_amount': [5, 10, 15, 20, 25]})
    x_test = pd.DataFrame({'trip_distance': [6, 7, 8]})
    y_test = pd.DataFrame({'fare_amount': [30, 35, 40]})

    # Write test data to temporary files
    x_train_path = tmp_path / "x_train.csv"
    y_train_path = tmp_path / "y_train.csv"
    x_test_path = tmp_path / "x_test.csv"
    y_test_path = tmp_path / "y_test.csv"
    charts_dir = tmp_path / "charts"

    os.makedirs(charts_dir, exist_ok=True)

    print(f"x_train_path: {x_train_path}")
    print(f"y_train_path: {y_train_path}")
    print(f"x_test_path: {x_test_path}")
    print(f"y_test_path: {y_test_path}")
    print(f"charts_dir: {charts_dir}")

    x_train.to_csv(x_train_path, index=False)
    y_train.to_csv(y_train_path, index=False)
    x_test.to_csv(x_test_path, index=False)
    y_test.to_csv(y_test_path, index=False)

    # Run the main function using CliRunner
    runner = CliRunner()
    result = runner.invoke(main, [
        f"--x-train-path={x_train_path}",
        f"--y-train-path={y_train_path}",
        f"--x-test-path={x_test_path}",
        f"--y-test-path={y_test_path}",
        f"--charts-dir={charts_dir}"
    ])

    # Check the command executed okay
    assert result.exit_code == 0, f"CLI failed with error: {result.output}"

    # Check if charts directory is created
    assert os.path.exists(charts_dir), "Charts directory was not created."

    # Check if all expected files are generated
    expected_files = [
        "Regression_Formula_Text.png",
        "Regression_Performance_Metrics.png",
        "Pred_Vs_Actual.png",
        "Final_Linear_Regression.png"
    ]

    for file_name in expected_files:
        assert os.path.exists(charts_dir / file_name), f"Expected file {file_name} was not created."

def test_main_handles_missing_files(tmp_path):
    """
    Test if the main function raises error for missing input files.
    """
    runner = CliRunner()

    # Create missing files 
    result = runner.invoke(main, [
        "--x-train-path=missing_x_train.csv",
        "--y-train-path=missing_y_train.csv",
        "--x-test-path=missing_x_test.csv",
        "--y-test-path=missing_y_test.csv"
    ])

    # Check command failed with proper error message
    assert result.exit_code != 0, "CLI should fail for missing input files."
    assert "Error: " in result.output and "missing_x_train.csv" in result.output, "Expected error message for missing files."

def test_main_creates_correct_metrics(tmp_path):
    """
    Test if the metrics generated by the main function are correct.
    """
    # Setup test data
    x_train = pd.DataFrame({'trip_distance': [1, 2, 3, 4, 5]})
    y_train = pd.DataFrame({'fare_amount': [5, 10, 15, 20, 25]})
    x_test = pd.DataFrame({'trip_distance': [6, 7, 8]})
    y_test = pd.DataFrame({'fare_amount': [30, 35, 40]})

    # Write test data to temporary files
    x_train_path = tmp_path / "x_train.csv"
    y_train_path = tmp_path / "y_train.csv"
    x_test_path = tmp_path / "x_test.csv"
    y_test_path = tmp_path / "y_test.csv"
    charts_dir = tmp_path / "charts"

    x_train.to_csv(x_train_path, index=False)
    y_train.to_csv(y_train_path, index=False)
    x_test.to_csv(x_test_path, index=False)
    y_test.to_csv(y_test_path, index=False)

    # Run the main function using CliRunner
    runner = CliRunner()
    result = runner.invoke(main, [
        f"--x-train-path={x_train_path}",
        f"--y-train-path={y_train_path}",
        f"--x-test-path={x_test_path}",
        f"--y-test-path={y_test_path}",
        f"--charts-dir={charts_dir}"
    ])

    # Check the command worked
    assert result.exit_code == 0, f"CLI failed with error: {result.output}"

    # Check the metrics were generated
    metrics_file = charts_dir / "Regression_Performance_Metrics.png"
    assert os.path.exists(metrics_file), "Metrics file was not created."

